Project 0
09/01/2016
Yadu Bhageria
00733164

I.a.

For /n:
Hello
World!
\n places a new line between the words

For \t:
Hello	World!
\t places a tab between the words

For \v:
Hello
     World!
\v places a “vertical tab” between the words. That is a new line and “World” starts on the column after the column where “Hello” ends

For \b:
HellWorld!
\b outputs a backspace after “Hello” which causes the “o” to be deleted

For \r:
World!
\r places a carriage return between the characters. That is deleting everything and starting from the beginning of the line

For \f:
Hello
     World!
\f places a “formfeed” between the words. That is it causes a page to be printed which in this case just moves the output to the next line (similar to \v)

For \a:
HelloWorld!
\a causes the system to beep

For \\:
Hello\World!
\\ outputs the character \

For \?:
Hello?World!
\? outputs the character ?

For \’:
Hello’World!
\’ outputs the character ‘

For \”:
Hello”World!
\” outputs the character “

Note: There are no changes by using a different compiler as C is standardised with ISO C characters.

I.b.

#include <stdio.h>

int main(void) {
printf("         Name: <Bhageria, Yadu>\n          CID: <00733164>\n   LIBRARY NO: <0246618471>\nEmail Address: <yrb13@ic.ac.uk>\n  Course Code: <M3SC>");
return(0);
}

         Name: <Bhageria, Yadu>
          CID: <00733164>
   LIBRARY NO: <0246618471>
Email Address: <yrb13@ic.ac.uk>
  Course Code: <M3SC>

II.

#include <stdio.h>
int main(void) 
{
	int i1=4, i2=11111, i3=777777777;
	float x1=2.0,x2=2.4048255576957728,x3=6.02214e23;
	printf("i1, i2, i3 = %d %d %d \n",i1,i2,i3);
	printf("x1, x2, x3 = %f %f %f \n",x1,x2,x3);
	return(0);
}

Output:
i1, i2, i3 = 4 11111 777777777 
x1, x2, x3 = 2.000000 2.404825 602213992297390856470528.000000 

a. with %8d instead of %d:
i1, i2, i3 =        4    11111 777777777 
x1, x2, x3 = 2.000000 2.404825 602213992297390856470528.000000
%8d uses at least 8 spaces for the output. If the digit is smaller then it fills the unused space with spaces before the number and if its longer then it outputs the entire number.

b. with %4d instead of %d:
i1, i2, i3 =    4 11111 777777777 
x1, x2, x3 = 2.000000 2.404825 602213992297390856470528.000000 
same as with %8d but with 4 spaces instead of 8.

c. with %e instead of %f:
i1, i2, i3 = 4 11111 777777777 
x1, x2, x3 = 2.000000e+00 2.404825e+00 6.022140e+23 
%e makes the numbers output as standard form

d. with %E instead of %f:
i1, i2, i3 = 4 11111 777777777 
x1, x2, x3 = 2.000000E+00 2.404825E+00 6.022140E+23 
again outputs in standard form and makes the “e” in the standard form capitalised to “E”

e. with %g instead of %f:
i1, i2, i3 = 4 11111 777777777 
x1, x2, x3 = 2 2.40483 6.02214e+23 
%g specifics the significant figures to be outputted. If this is not specified then 6 is used a default value. If the number is greater than 6 digits then standard form is used. Trailing zeros are removed from the fractional part of the result and decimals only appear if there is at least 1 non zero value part the decimal

f. with %10.2g instead of %f:
i1, i2, i3 = 4 11111 777777777 
x1, x2, x3 =          2        2.40482544899      6e+23 
in %10.2g(/%20.12g) the 10(/20) specifies the amount of space to be used for each output (as with %8d) and the .2(/.12) specifies the number of significant figures to be used. 

with double instead of float:
i1, i2, i3 = 4 11111 777777777 
x1, x2, x3 = 2.000000 2.404826 602213999999999969067008.000000 
Double allocated double the number of bits to store the value. The output becomes more accurate.

III.

#include <stdio.h>
int main(void) 
{
	short i1=44,i2=55,i3;
	i3=i1+i2;
	printf("i1, i2, i3 = %d %d %d \n", i1,i2,i3);
	return(0);
}

i1, i2, i3 = 44 55 99

a. 
i1, i2, i3 = 44 55 0 
Yes, this is expected. i1 and i2 multiply.

b. 
i1, i2, i3 = 44 55 0 
Yes, this is expected. i1/i2 is smaller than 1 which rounds down to its integer value of 0.

c.
i1, i2, i3 = 44 55 1 
Yes, this is expected. i2/i1 is greater than 1 and smaller than 2 so it rounds down to the integer component of 1

d. 
i1, i2, i3 = -21092 -9981 -31073
Yes, this is expected. 2^16 is 65536 and 44444-2^16=-21092, 55555-2^16=-9981 and i1+i2=99999 and -31073=99999-2^16. Short means our outputs are in a ring of value 2^16. 

For new values i1=44444, i2=55555:
e.
i1, i2, i3 = -21092 -9981 17620 
44444-2^16=-21092, 55555-2^16=-9981 and 44444*55555-(37675*2^16) = 17620

f.
i1, i2, i3 = -21092 -9981 2 
44444-2^16=-21092, 55555-2^16=-9981 and -9981 goes into -21091 twice so outputs 2

g.
i1, i2, i3 = -21092 -9981 0 
44444-2^16=-21092, 55555-2^16=-9981 and -21092 goes into -9981 zero times so outputs 0

IV.

2^-24 = 5.96 x 10^-8
2^-52 = 1.11 x 10^-16
2^-113 = 9.63 x 10^-35

#include <stdio.h>
int main(void) 
{
	float x1=1.0e6,x2=2.4048255576957728,x3;
	x3=x1+x2;
	printf("x1, x2, x3 = %f %f %f \n", x1,x2,x3);
	return(0);
}

x1, x2, x3 = 1000000.000000 2.404825 1000002.375000 
Yes, this is expected. x3 is calculated to an accuracy of 7-8 significant figures as 24 bits are used for storing the significand. We can note this by seeing the sum, 1000002.4048255, rounded down to 7-8 significant figures is equal to the value here.

a.
x1, x2, x3 = 1000000.000000 2.404825 2404825.500000 
Yes, this is expected. x3 is calculated to 7-8 significant figures precision. 2.4048255576957728 truncated to 7-8 significant figures and multiplied by 1^6 which is the value outputted with the default of 6 decimal places for %f

b.
x1, x2, x3 = 1000000.000000 2.404825 415830.593750 
Yes, this is expected. Again 2.4048255576957728 truncated to 7-8 significant figures and then 1000000.0 / 2.4048255 = 415830.587292 which is again truncated to 415830.593750 

c.
x1, x2, x3 = 1000000.000000 2.404825 0.000002
Yes, this is expected. Similar as above but when we divide  2.4048255 / 1000000.0 = 0.00000240482 which is truncated down to 0.000002 due to the default of 6 decimal places for %f

d.
Doesn’t compile. modulo in gcc doesn’t work with floats. 

e. 
x1, x2, x3 = 602213992297390856470528.000000 299999995292024832.000000 602214280527767008182272.000000
x1 and x2 are accurate to between 7-8 significant figures. x3 works by adding 602213992297390856470528.000000 to 299999995292024832.000000 which gives 602214280527767008182272.000000 to 7-8 significant figures. 

f.
x1, x2, x3 = 602213992297390856470528.000000 299999995292024832.000000 inf 
Yes, this is expected 

g. 

h.

i.

V. 

#include <stdio.h>
int main(void) {
	int high=160,step=5,F,C=-40;
	while(C <= high)
	{
		F=32+9*C/5;
		printf("%6d %10.2f %6d %10.2f \n", C,C+273.15,F,F+459.67);
		C=C+step;
	}
	return(0);
}

Outputs:
   -40     233.15    -40     419.67 
   -35     238.15    -31     428.67 
   -30     243.15    -22     437.67 
   -25     248.15    -13     446.67 
   -20     253.15     -4     455.67 
   -15     258.15      5     464.67 
   -10     263.15     14     473.67 
    -5     268.15     23     482.67 
     0     273.15     32     491.67 
     5     278.15     41     500.67 
    10     283.15     50     509.67 
    15     288.15     59     518.67 
    20     293.15     68     527.67 
    25     298.15     77     536.67 
    30     303.15     86     545.67 
    35     308.15     95     554.67 
    40     313.15    104     563.67 
    45     318.15    113     572.67 
    50     323.15    122     581.67 
    55     328.15    131     590.67 
    60     333.15    140     599.67 
    65     338.15    149     608.67 
    70     343.15    158     617.67 
    75     348.15    167     626.67 
    80     353.15    176     635.67 
    85     358.15    185     644.67 
    90     363.15    194     653.67 
    95     368.15    203     662.67 
   100     373.15    212     671.67 
   105     378.15    221     680.67 
   110     383.15    230     689.67 
   115     388.15    239     698.67 
   120     393.15    248     707.67 
   125     398.15    257     716.67 
   130     403.15    266     725.67 
   135     408.15    275     734.67 
   140     413.15    284     743.67 
   145     418.15    293     752.67 
   150     423.15    302     761.67 
   155     428.15    311     770.67 
   160     433.15    320     779.67 


Blah Blah

     C   C+273.15      F   F+459.67
   -40     233.15  -40.0     419.67 
   -38     235.15  -36.0     423.67 
   -36     237.15  -32.0     427.67 
   -34     239.15  -29.0     430.67 
   -32     241.15  -25.0     434.67 
   -30     243.15  -22.0     437.67 
   -28     245.15  -18.0     441.67 
   -26     247.15  -14.0     445.67 
   -24     249.15  -11.0     448.67 
   -22     251.15   -7.0     452.67 
   -20     253.15   -4.0     455.67 
   -18     255.15    0.0     459.67 
   -16     257.15    4.0     463.67 
   -14     259.15    7.0     466.67 
   -12     261.15   11.0     470.67 
   -10     263.15   14.0     473.67 
    -8     265.15   18.0     477.67 
    -6     267.15   22.0     481.67 
    -4     269.15   25.0     484.67 
    -2     271.15   29.0     488.67 
     0     273.15   32.0     491.67 
     2     275.15   35.0     494.67 
     4     277.15   39.0     498.67 
     6     279.15   42.0     501.67 
     8     281.15   46.0     505.67 
    10     283.15   50.0     509.67 
    12     285.15   53.0     512.67 
    14     287.15   57.0     516.67 
    16     289.15   60.0     519.67 
    18     291.15   64.0     523.67 
    20     293.15   68.0     527.67 
    22     295.15   71.0     530.67 
    24     297.15   75.0     534.67 
    26     299.15   78.0     537.67 
    28     301.15   82.0     541.67 
    30     303.15   86.0     545.67 
    32     305.15   89.0     548.67 
    34     307.15   93.0     552.67 
    36     309.15   96.0     555.67 
    38     311.15  100.0     559.67 
    40     313.15  104.0     563.67 
    42     315.15  107.0     566.67 
    44     317.15  111.0     570.67 
    46     319.15  114.0     573.67 
    48     321.15  118.0     577.67 
    50     323.15  122.0     581.67 
    52     325.15  125.0     584.67 
    54     327.15  129.0     588.67 
    56     329.15  132.0     591.67 
    58     331.15  136.0     595.67 
    60     333.15  140.0     599.67 
    62     335.15  143.0     602.67 
    64     337.15  147.0     606.67 
    66     339.15  150.0     609.67 
    68     341.15  154.0     613.67 
    70     343.15  158.0     617.67 
    72     345.15  161.0     620.67 
    74     347.15  165.0     624.67 
    76     349.15  168.0     627.67 
    78     351.15  172.0     631.67 
    80     353.15  176.0     635.67 
    82     355.15  179.0     638.67 
    84     357.15  183.0     642.67 
    86     359.15  186.0     645.67 
    88     361.15  190.0     649.67 
    90     363.15  194.0     653.67 
    92     365.15  197.0     656.67 
    94     367.15  201.0     660.67 
    96     369.15  204.0     663.67 
    98     371.15  208.0     667.67 
   100     373.15  212.0     671.67 
   102     375.15  215.0     674.67 
   104     377.15  219.0     678.67 
   106     379.15  222.0     681.67 
   108     381.15  226.0     685.67 
   110     383.15  230.0     689.67 
   112     385.15  233.0     692.67 
   114     387.15  237.0     696.67 
   116     389.15  240.0     699.67 
   118     391.15  244.0     703.67 
   120     393.15  248.0     707.67 
   122     395.15  251.0     710.67 
   124     397.15  255.0     714.67 
   126     399.15  258.0     717.67 
   128     401.15  262.0     721.67 
   130     403.15  266.0     725.67 
   132     405.15  269.0     728.67 
   134     407.15  273.0     732.67 
   136     409.15  276.0     735.67 
   138     411.15  280.0     739.67 
   140     413.15  284.0     743.67 
   142     415.15  287.0     746.67 
   144     417.15  291.0     750.67 
   146     419.15  294.0     753.67 
   148     421.15  298.0     757.67 
   150     423.15  302.0     761.67 
   152     425.15  305.0     764.67 
   154     427.15  309.0     768.67 
   156     429.15  312.0     771.67 
   158     431.15  316.0     775.67 
   160     433.15  320.0     779.67



